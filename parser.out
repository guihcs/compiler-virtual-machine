Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> functions
Rule 1     functions -> function functions
Rule 2     functions -> empty
Rule 3     function -> FUNC ID LPAREN params RPAREN LBR statements RBR
Rule 4     pcall -> logic pclist
Rule 5     pcall -> empty
Rule 6     pclist -> COMMA logic pclist
Rule 7     pclist -> empty
Rule 8     params -> ID plist
Rule 9     params -> empty
Rule 10    plist -> COMMA ID plist
Rule 11    plist -> empty
Rule 12    statements -> statement statements
Rule 13    statements -> empty
Rule 14    statement -> attrib
Rule 15    statement -> if
Rule 16    statement -> while
Rule 17    statement -> return
Rule 18    empty -> <empty>
Rule 19    if -> IF LPAREN logic RPAREN LBR statements RBR
Rule 20    while -> WHILE LPAREN logic RPAREN LBR statements RBR
Rule 21    return -> RETURN logic SEMICOLON
Rule 22    attrib -> ID ATTRIB logic SEMICOLON
Rule 23    logic -> logic LT logic
Rule 24    logic -> expression
Rule 25    expression -> expression PLUS expression
Rule 26    expression -> expression MINUS expression
Rule 27    expression -> term
Rule 28    term -> term TIMES term
Rule 29    term -> term DIVIDE term
Rule 30    term -> call
Rule 31    term -> NUMBER
Rule 32    term -> ID
Rule 33    call -> ID LPAREN pcall RPAREN
Rule 34    term -> LPAREN expression RPAREN

Terminals, with rules where they appear

ATTRIB               : 22
COMMA                : 6 10
DIVIDE               : 29
FUNC                 : 3
ID                   : 3 8 10 22 32 33
IF                   : 19
LBR                  : 3 19 20
LPAREN               : 3 19 20 33 34
LT                   : 23
MINUS                : 26
NUMBER               : 31
PLUS                 : 25
RBR                  : 3 19 20
RETURN               : 21
RPAREN               : 3 19 20 33 34
SEMICOLON            : 21 22
TIMES                : 28
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

attrib               : 14
call                 : 30
empty                : 2 5 7 9 11 13
expression           : 24 25 25 26 26 34
function             : 1
functions            : 1 0
if                   : 15
logic                : 4 6 19 20 21 22 23 23
params               : 3
pcall                : 33
pclist               : 4 6
plist                : 8 10
return               : 17
statement            : 12
statements           : 3 12 19 20
term                 : 27 28 28 29 29
while                : 16

Parsing method: LALR

state 0

    (0) S' -> . functions
    (1) functions -> . function functions
    (2) functions -> . empty
    (3) function -> . FUNC ID LPAREN params RPAREN LBR statements RBR
    (18) empty -> .

    FUNC            shift and go to state 4
    $end            reduce using rule 18 (empty -> .)

    functions                      shift and go to state 1
    function                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> functions .



state 2

    (1) functions -> function . functions
    (1) functions -> . function functions
    (2) functions -> . empty
    (3) function -> . FUNC ID LPAREN params RPAREN LBR statements RBR
    (18) empty -> .

    FUNC            shift and go to state 4
    $end            reduce using rule 18 (empty -> .)

    function                       shift and go to state 2
    functions                      shift and go to state 5
    empty                          shift and go to state 3

state 3

    (2) functions -> empty .

    $end            reduce using rule 2 (functions -> empty .)


state 4

    (3) function -> FUNC . ID LPAREN params RPAREN LBR statements RBR

    ID              shift and go to state 6


state 5

    (1) functions -> function functions .

    $end            reduce using rule 1 (functions -> function functions .)


state 6

    (3) function -> FUNC ID . LPAREN params RPAREN LBR statements RBR

    LPAREN          shift and go to state 7


state 7

    (3) function -> FUNC ID LPAREN . params RPAREN LBR statements RBR
    (8) params -> . ID plist
    (9) params -> . empty
    (18) empty -> .

    ID              shift and go to state 8
    RPAREN          reduce using rule 18 (empty -> .)

    params                         shift and go to state 9
    empty                          shift and go to state 10

state 8

    (8) params -> ID . plist
    (10) plist -> . COMMA ID plist
    (11) plist -> . empty
    (18) empty -> .

    COMMA           shift and go to state 12
    RPAREN          reduce using rule 18 (empty -> .)

    plist                          shift and go to state 11
    empty                          shift and go to state 13

state 9

    (3) function -> FUNC ID LPAREN params . RPAREN LBR statements RBR

    RPAREN          shift and go to state 14


state 10

    (9) params -> empty .

    RPAREN          reduce using rule 9 (params -> empty .)


state 11

    (8) params -> ID plist .

    RPAREN          reduce using rule 8 (params -> ID plist .)


state 12

    (10) plist -> COMMA . ID plist

    ID              shift and go to state 15


state 13

    (11) plist -> empty .

    RPAREN          reduce using rule 11 (plist -> empty .)


state 14

    (3) function -> FUNC ID LPAREN params RPAREN . LBR statements RBR

    LBR             shift and go to state 16


state 15

    (10) plist -> COMMA ID . plist
    (10) plist -> . COMMA ID plist
    (11) plist -> . empty
    (18) empty -> .

    COMMA           shift and go to state 12
    RPAREN          reduce using rule 18 (empty -> .)

    plist                          shift and go to state 17
    empty                          shift and go to state 13

state 16

    (3) function -> FUNC ID LPAREN params RPAREN LBR . statements RBR
    (12) statements -> . statement statements
    (13) statements -> . empty
    (14) statement -> . attrib
    (15) statement -> . if
    (16) statement -> . while
    (17) statement -> . return
    (18) empty -> .
    (22) attrib -> . ID ATTRIB logic SEMICOLON
    (19) if -> . IF LPAREN logic RPAREN LBR statements RBR
    (20) while -> . WHILE LPAREN logic RPAREN LBR statements RBR
    (21) return -> . RETURN logic SEMICOLON

    RBR             reduce using rule 18 (empty -> .)
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statements                     shift and go to state 19
    statement                      shift and go to state 20
    empty                          shift and go to state 21
    attrib                         shift and go to state 22
    if                             shift and go to state 23
    while                          shift and go to state 24
    return                         shift and go to state 25

state 17

    (10) plist -> COMMA ID plist .

    RPAREN          reduce using rule 10 (plist -> COMMA ID plist .)


state 18

    (22) attrib -> ID . ATTRIB logic SEMICOLON

    ATTRIB          shift and go to state 29


state 19

    (3) function -> FUNC ID LPAREN params RPAREN LBR statements . RBR

    RBR             shift and go to state 30


state 20

    (12) statements -> statement . statements
    (12) statements -> . statement statements
    (13) statements -> . empty
    (14) statement -> . attrib
    (15) statement -> . if
    (16) statement -> . while
    (17) statement -> . return
    (18) empty -> .
    (22) attrib -> . ID ATTRIB logic SEMICOLON
    (19) if -> . IF LPAREN logic RPAREN LBR statements RBR
    (20) while -> . WHILE LPAREN logic RPAREN LBR statements RBR
    (21) return -> . RETURN logic SEMICOLON

    RBR             reduce using rule 18 (empty -> .)
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statement                      shift and go to state 20
    statements                     shift and go to state 31
    empty                          shift and go to state 21
    attrib                         shift and go to state 22
    if                             shift and go to state 23
    while                          shift and go to state 24
    return                         shift and go to state 25

state 21

    (13) statements -> empty .

    RBR             reduce using rule 13 (statements -> empty .)


state 22

    (14) statement -> attrib .

    ID              reduce using rule 14 (statement -> attrib .)
    IF              reduce using rule 14 (statement -> attrib .)
    WHILE           reduce using rule 14 (statement -> attrib .)
    RETURN          reduce using rule 14 (statement -> attrib .)
    RBR             reduce using rule 14 (statement -> attrib .)


state 23

    (15) statement -> if .

    ID              reduce using rule 15 (statement -> if .)
    IF              reduce using rule 15 (statement -> if .)
    WHILE           reduce using rule 15 (statement -> if .)
    RETURN          reduce using rule 15 (statement -> if .)
    RBR             reduce using rule 15 (statement -> if .)


state 24

    (16) statement -> while .

    ID              reduce using rule 16 (statement -> while .)
    IF              reduce using rule 16 (statement -> while .)
    WHILE           reduce using rule 16 (statement -> while .)
    RETURN          reduce using rule 16 (statement -> while .)
    RBR             reduce using rule 16 (statement -> while .)


state 25

    (17) statement -> return .

    ID              reduce using rule 17 (statement -> return .)
    IF              reduce using rule 17 (statement -> return .)
    WHILE           reduce using rule 17 (statement -> return .)
    RETURN          reduce using rule 17 (statement -> return .)
    RBR             reduce using rule 17 (statement -> return .)


state 26

    (19) if -> IF . LPAREN logic RPAREN LBR statements RBR

    LPAREN          shift and go to state 32


state 27

    (20) while -> WHILE . LPAREN logic RPAREN LBR statements RBR

    LPAREN          shift and go to state 33


state 28

    (21) return -> RETURN . logic SEMICOLON
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    logic                          shift and go to state 34
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 29

    (22) attrib -> ID ATTRIB . logic SEMICOLON
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    logic                          shift and go to state 41
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 30

    (3) function -> FUNC ID LPAREN params RPAREN LBR statements RBR .

    FUNC            reduce using rule 3 (function -> FUNC ID LPAREN params RPAREN LBR statements RBR .)
    $end            reduce using rule 3 (function -> FUNC ID LPAREN params RPAREN LBR statements RBR .)


state 31

    (12) statements -> statement statements .

    RBR             reduce using rule 12 (statements -> statement statements .)


state 32

    (19) if -> IF LPAREN . logic RPAREN LBR statements RBR
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    logic                          shift and go to state 42
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 33

    (20) while -> WHILE LPAREN . logic RPAREN LBR statements RBR
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    logic                          shift and go to state 43
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 34

    (21) return -> RETURN logic . SEMICOLON
    (23) logic -> logic . LT logic

    SEMICOLON       shift and go to state 44
    LT              shift and go to state 45


state 35

    (24) logic -> expression .
    (25) expression -> expression . PLUS expression
    (26) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 24 (logic -> expression .)
    LT              reduce using rule 24 (logic -> expression .)
    RPAREN          reduce using rule 24 (logic -> expression .)
    COMMA           reduce using rule 24 (logic -> expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47


state 36

    (27) expression -> term .
    (28) term -> term . TIMES term
    (29) term -> term . DIVIDE term

    PLUS            reduce using rule 27 (expression -> term .)
    MINUS           reduce using rule 27 (expression -> term .)
    SEMICOLON       reduce using rule 27 (expression -> term .)
    LT              reduce using rule 27 (expression -> term .)
    RPAREN          reduce using rule 27 (expression -> term .)
    COMMA           reduce using rule 27 (expression -> term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 37

    (30) term -> call .

    TIMES           reduce using rule 30 (term -> call .)
    DIVIDE          reduce using rule 30 (term -> call .)
    PLUS            reduce using rule 30 (term -> call .)
    MINUS           reduce using rule 30 (term -> call .)
    SEMICOLON       reduce using rule 30 (term -> call .)
    LT              reduce using rule 30 (term -> call .)
    RPAREN          reduce using rule 30 (term -> call .)
    COMMA           reduce using rule 30 (term -> call .)


state 38

    (31) term -> NUMBER .

    TIMES           reduce using rule 31 (term -> NUMBER .)
    DIVIDE          reduce using rule 31 (term -> NUMBER .)
    PLUS            reduce using rule 31 (term -> NUMBER .)
    MINUS           reduce using rule 31 (term -> NUMBER .)
    SEMICOLON       reduce using rule 31 (term -> NUMBER .)
    LT              reduce using rule 31 (term -> NUMBER .)
    RPAREN          reduce using rule 31 (term -> NUMBER .)
    COMMA           reduce using rule 31 (term -> NUMBER .)


state 39

    (32) term -> ID .
    (33) call -> ID . LPAREN pcall RPAREN

    TIMES           reduce using rule 32 (term -> ID .)
    DIVIDE          reduce using rule 32 (term -> ID .)
    PLUS            reduce using rule 32 (term -> ID .)
    MINUS           reduce using rule 32 (term -> ID .)
    SEMICOLON       reduce using rule 32 (term -> ID .)
    LT              reduce using rule 32 (term -> ID .)
    RPAREN          reduce using rule 32 (term -> ID .)
    COMMA           reduce using rule 32 (term -> ID .)
    LPAREN          shift and go to state 50


state 40

    (34) term -> LPAREN . expression RPAREN
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    expression                     shift and go to state 51
    term                           shift and go to state 36
    call                           shift and go to state 37

state 41

    (22) attrib -> ID ATTRIB logic . SEMICOLON
    (23) logic -> logic . LT logic

    SEMICOLON       shift and go to state 52
    LT              shift and go to state 45


state 42

    (19) if -> IF LPAREN logic . RPAREN LBR statements RBR
    (23) logic -> logic . LT logic

    RPAREN          shift and go to state 53
    LT              shift and go to state 45


state 43

    (20) while -> WHILE LPAREN logic . RPAREN LBR statements RBR
    (23) logic -> logic . LT logic

    RPAREN          shift and go to state 54
    LT              shift and go to state 45


state 44

    (21) return -> RETURN logic SEMICOLON .

    ID              reduce using rule 21 (return -> RETURN logic SEMICOLON .)
    IF              reduce using rule 21 (return -> RETURN logic SEMICOLON .)
    WHILE           reduce using rule 21 (return -> RETURN logic SEMICOLON .)
    RETURN          reduce using rule 21 (return -> RETURN logic SEMICOLON .)
    RBR             reduce using rule 21 (return -> RETURN logic SEMICOLON .)


state 45

    (23) logic -> logic LT . logic
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    logic                          shift and go to state 55
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 46

    (25) expression -> expression PLUS . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    expression                     shift and go to state 56
    term                           shift and go to state 36
    call                           shift and go to state 37

state 47

    (26) expression -> expression MINUS . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    expression                     shift and go to state 57
    term                           shift and go to state 36
    call                           shift and go to state 37

state 48

    (28) term -> term TIMES . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    term                           shift and go to state 58
    call                           shift and go to state 37

state 49

    (29) term -> term DIVIDE . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    term                           shift and go to state 59
    call                           shift and go to state 37

state 50

    (33) call -> ID LPAREN . pcall RPAREN
    (4) pcall -> . logic pclist
    (5) pcall -> . empty
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (18) empty -> .
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    RPAREN          reduce using rule 18 (empty -> .)
    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    pcall                          shift and go to state 60
    logic                          shift and go to state 61
    empty                          shift and go to state 62
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 51

    (34) term -> LPAREN expression . RPAREN
    (25) expression -> expression . PLUS expression
    (26) expression -> expression . MINUS expression

    RPAREN          shift and go to state 63
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47


state 52

    (22) attrib -> ID ATTRIB logic SEMICOLON .

    ID              reduce using rule 22 (attrib -> ID ATTRIB logic SEMICOLON .)
    IF              reduce using rule 22 (attrib -> ID ATTRIB logic SEMICOLON .)
    WHILE           reduce using rule 22 (attrib -> ID ATTRIB logic SEMICOLON .)
    RETURN          reduce using rule 22 (attrib -> ID ATTRIB logic SEMICOLON .)
    RBR             reduce using rule 22 (attrib -> ID ATTRIB logic SEMICOLON .)


state 53

    (19) if -> IF LPAREN logic RPAREN . LBR statements RBR

    LBR             shift and go to state 64


state 54

    (20) while -> WHILE LPAREN logic RPAREN . LBR statements RBR

    LBR             shift and go to state 65


state 55

    (23) logic -> logic LT logic .
    (23) logic -> logic . LT logic

  ! shift/reduce conflict for LT resolved as shift
    SEMICOLON       reduce using rule 23 (logic -> logic LT logic .)
    RPAREN          reduce using rule 23 (logic -> logic LT logic .)
    COMMA           reduce using rule 23 (logic -> logic LT logic .)
    LT              shift and go to state 45

  ! LT              [ reduce using rule 23 (logic -> logic LT logic .) ]


state 56

    (25) expression -> expression PLUS expression .
    (25) expression -> expression . PLUS expression
    (26) expression -> expression . MINUS expression

    PLUS            reduce using rule 25 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 25 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 25 (expression -> expression PLUS expression .)
    LT              reduce using rule 25 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 25 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 25 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]


state 57

    (26) expression -> expression MINUS expression .
    (25) expression -> expression . PLUS expression
    (26) expression -> expression . MINUS expression

    PLUS            reduce using rule 26 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 26 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 26 (expression -> expression MINUS expression .)
    LT              reduce using rule 26 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 26 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 26 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]


state 58

    (28) term -> term TIMES term .
    (28) term -> term . TIMES term
    (29) term -> term . DIVIDE term

    TIMES           reduce using rule 28 (term -> term TIMES term .)
    DIVIDE          reduce using rule 28 (term -> term TIMES term .)
    PLUS            reduce using rule 28 (term -> term TIMES term .)
    MINUS           reduce using rule 28 (term -> term TIMES term .)
    SEMICOLON       reduce using rule 28 (term -> term TIMES term .)
    LT              reduce using rule 28 (term -> term TIMES term .)
    RPAREN          reduce using rule 28 (term -> term TIMES term .)
    COMMA           reduce using rule 28 (term -> term TIMES term .)

  ! TIMES           [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]


state 59

    (29) term -> term DIVIDE term .
    (28) term -> term . TIMES term
    (29) term -> term . DIVIDE term

    TIMES           reduce using rule 29 (term -> term DIVIDE term .)
    DIVIDE          reduce using rule 29 (term -> term DIVIDE term .)
    PLUS            reduce using rule 29 (term -> term DIVIDE term .)
    MINUS           reduce using rule 29 (term -> term DIVIDE term .)
    SEMICOLON       reduce using rule 29 (term -> term DIVIDE term .)
    LT              reduce using rule 29 (term -> term DIVIDE term .)
    RPAREN          reduce using rule 29 (term -> term DIVIDE term .)
    COMMA           reduce using rule 29 (term -> term DIVIDE term .)

  ! TIMES           [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]


state 60

    (33) call -> ID LPAREN pcall . RPAREN

    RPAREN          shift and go to state 66


state 61

    (4) pcall -> logic . pclist
    (23) logic -> logic . LT logic
    (6) pclist -> . COMMA logic pclist
    (7) pclist -> . empty
    (18) empty -> .

    LT              shift and go to state 45
    COMMA           shift and go to state 68
    RPAREN          reduce using rule 18 (empty -> .)

    pclist                         shift and go to state 67
    empty                          shift and go to state 69

state 62

    (5) pcall -> empty .

    RPAREN          reduce using rule 5 (pcall -> empty .)


state 63

    (34) term -> LPAREN expression RPAREN .

    TIMES           reduce using rule 34 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 34 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 34 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 34 (term -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 34 (term -> LPAREN expression RPAREN .)
    LT              reduce using rule 34 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 34 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 34 (term -> LPAREN expression RPAREN .)


state 64

    (19) if -> IF LPAREN logic RPAREN LBR . statements RBR
    (12) statements -> . statement statements
    (13) statements -> . empty
    (14) statement -> . attrib
    (15) statement -> . if
    (16) statement -> . while
    (17) statement -> . return
    (18) empty -> .
    (22) attrib -> . ID ATTRIB logic SEMICOLON
    (19) if -> . IF LPAREN logic RPAREN LBR statements RBR
    (20) while -> . WHILE LPAREN logic RPAREN LBR statements RBR
    (21) return -> . RETURN logic SEMICOLON

    RBR             reduce using rule 18 (empty -> .)
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statements                     shift and go to state 70
    statement                      shift and go to state 20
    empty                          shift and go to state 21
    attrib                         shift and go to state 22
    if                             shift and go to state 23
    while                          shift and go to state 24
    return                         shift and go to state 25

state 65

    (20) while -> WHILE LPAREN logic RPAREN LBR . statements RBR
    (12) statements -> . statement statements
    (13) statements -> . empty
    (14) statement -> . attrib
    (15) statement -> . if
    (16) statement -> . while
    (17) statement -> . return
    (18) empty -> .
    (22) attrib -> . ID ATTRIB logic SEMICOLON
    (19) if -> . IF LPAREN logic RPAREN LBR statements RBR
    (20) while -> . WHILE LPAREN logic RPAREN LBR statements RBR
    (21) return -> . RETURN logic SEMICOLON

    RBR             reduce using rule 18 (empty -> .)
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statements                     shift and go to state 71
    statement                      shift and go to state 20
    empty                          shift and go to state 21
    attrib                         shift and go to state 22
    if                             shift and go to state 23
    while                          shift and go to state 24
    return                         shift and go to state 25

state 66

    (33) call -> ID LPAREN pcall RPAREN .

    TIMES           reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    DIVIDE          reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    PLUS            reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    MINUS           reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    SEMICOLON       reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    LT              reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    RPAREN          reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)
    COMMA           reduce using rule 33 (call -> ID LPAREN pcall RPAREN .)


state 67

    (4) pcall -> logic pclist .

    RPAREN          reduce using rule 4 (pcall -> logic pclist .)


state 68

    (6) pclist -> COMMA . logic pclist
    (23) logic -> . logic LT logic
    (24) logic -> . expression
    (25) expression -> . expression PLUS expression
    (26) expression -> . expression MINUS expression
    (27) expression -> . term
    (28) term -> . term TIMES term
    (29) term -> . term DIVIDE term
    (30) term -> . call
    (31) term -> . NUMBER
    (32) term -> . ID
    (34) term -> . LPAREN expression RPAREN
    (33) call -> . ID LPAREN pcall RPAREN

    NUMBER          shift and go to state 38
    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    logic                          shift and go to state 72
    expression                     shift and go to state 35
    term                           shift and go to state 36
    call                           shift and go to state 37

state 69

    (7) pclist -> empty .

    RPAREN          reduce using rule 7 (pclist -> empty .)


state 70

    (19) if -> IF LPAREN logic RPAREN LBR statements . RBR

    RBR             shift and go to state 73


state 71

    (20) while -> WHILE LPAREN logic RPAREN LBR statements . RBR

    RBR             shift and go to state 74


state 72

    (6) pclist -> COMMA logic . pclist
    (23) logic -> logic . LT logic
    (6) pclist -> . COMMA logic pclist
    (7) pclist -> . empty
    (18) empty -> .

    LT              shift and go to state 45
    COMMA           shift and go to state 68
    RPAREN          reduce using rule 18 (empty -> .)

    pclist                         shift and go to state 75
    empty                          shift and go to state 69

state 73

    (19) if -> IF LPAREN logic RPAREN LBR statements RBR .

    ID              reduce using rule 19 (if -> IF LPAREN logic RPAREN LBR statements RBR .)
    IF              reduce using rule 19 (if -> IF LPAREN logic RPAREN LBR statements RBR .)
    WHILE           reduce using rule 19 (if -> IF LPAREN logic RPAREN LBR statements RBR .)
    RETURN          reduce using rule 19 (if -> IF LPAREN logic RPAREN LBR statements RBR .)
    RBR             reduce using rule 19 (if -> IF LPAREN logic RPAREN LBR statements RBR .)


state 74

    (20) while -> WHILE LPAREN logic RPAREN LBR statements RBR .

    ID              reduce using rule 20 (while -> WHILE LPAREN logic RPAREN LBR statements RBR .)
    IF              reduce using rule 20 (while -> WHILE LPAREN logic RPAREN LBR statements RBR .)
    WHILE           reduce using rule 20 (while -> WHILE LPAREN logic RPAREN LBR statements RBR .)
    RETURN          reduce using rule 20 (while -> WHILE LPAREN logic RPAREN LBR statements RBR .)
    RBR             reduce using rule 20 (while -> WHILE LPAREN logic RPAREN LBR statements RBR .)


state 75

    (6) pclist -> COMMA logic pclist .

    RPAREN          reduce using rule 6 (pclist -> COMMA logic pclist .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LT in state 55 resolved as shift
